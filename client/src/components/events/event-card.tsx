import { Event } from "@shared/schema";
import { format } from "date-fns";
import { Megaphone, AlertTriangle, Trophy, Building, Waves, CheckCircle2 } from "lucide-react";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";

interface EventCardProps {
  event: Event;
  onMarkAsRead: () => void;
}

export default function EventCard({ event, onMarkAsRead }: EventCardProps) {
  // Determine icon and styling based on event type
  const getIconAndColor = () => {
    switch (event.type) {
      case "mayoral_bulletin":
        return {
          Icon: Megaphone,
          bgColor: "bg-primary",
          borderColor: "border-primary"
        };
      case "storm_surge":
        return {
          Icon: AlertTriangle,
          bgColor: "bg-warning",
          borderColor: "border-warning"
        };
      case "building_constructed":
        return {
          Icon: Building,
          bgColor: "bg-gray-400",
          borderColor: "border-gray-400"
        };
      case "welcome":
        return {
          Icon: CheckCircle2,
          bgColor: "bg-success",
          borderColor: "border-success"
        };
      case "resource_milestone":
        return {
          Icon: Trophy,
          bgColor: "bg-success",
          borderColor: "border-success"
        };
      default:
        return {
          Icon: Waves,
          bgColor: "bg-primary",
          borderColor: "border-primary"
        };
    }
  };
  
  const { Icon, bgColor, borderColor } = getIconAndColor();
  
  // Format the event date
  const formatEventDate = (timestamp: Date) => {
    const eventDate = new Date(timestamp);
    const today = new Date();
    
    // If event is from today, just show the time
    if (eventDate.toDateString() === today.toDateString()) {
      return `Today, ${format(eventDate, 'h:mm a')}`;
    }
    
    // If event is from yesterday, show "Yesterday"
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    if (eventDate.toDateString() === yesterday.toDateString()) {
      return `Yesterday, ${format(eventDate, 'h:mm a')}`;
    }
    
    // Otherwise, show full date
    return format(eventDate, 'MMM dd, yyyy - h:mm a');
  };
  
  const handleMarkAsRead = async () => {
    if (event.read) return;
    
    try {
      await apiRequest('PATCH', `/api/events/${event.id}/read`, {});
      onMarkAsRead();
      
      // Invalidate the events query to refresh the list
      queryClient.invalidateQueries({ queryKey: ['/api/cities', event.cityId, 'events'] });
    } catch (error) {
      console.error('Error marking event as read:', error);
    }
  };

  return (
    <div className={`bg-white rounded-xl shadow-sm p-4 border-l-4 ${borderColor} ${!event.read ? 'bg-blue-50' : ''}`}>
      <div className="flex">
        <div className={`w-12 h-12 ${bgColor} rounded-full flex items-center justify-center text-white shrink-0 mr-4`}>
          <Icon className="h-5 w-5" />
        </div>
        <div className="flex-1">
          <h3 className="font-heading font-bold text-lg">{event.title}</h3>
          <div className="text-sm text-gray-500 mb-2">
            {formatEventDate(event.createdAt)}
          </div>
          <p className="text-gray-700">
            {event.message}
          </p>
          
          {!event.read && (
            <div className="mt-3 text-right">
              <button 
                className="text-sm text-primary hover:text-primary-dark font-medium"
                onClick={handleMarkAsRead}
              >
                Mark as Read
              </button>
            </div>
          )}
          
          {event.type === "mayoral_bulletin" && (
            <div className="mt-3 text-sm text-gray-500">Generated by AI based on tide predictions</div>
          )}
        </div>
      </div>
    </div>
  );
}
